plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.google.gms.google-services' // google services gradle plugin
    id 'jacoco'
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.soen490chrysalis.papilio"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField("String", "USER_API_URL", "\"" + localProperties['USER_API_URL'] + "\"")
            buildConfigField("String", "ACTIVITY_API_URL", "\"" + localProperties['ACTIVITY_API_URL'] + "\"")
            buildConfigField("String", "MAPBOX_SECRET_TOKEN", "\"" + localProperties['MAPBOX_SECRET_TOKEN'] + "\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "USER_API_URL", "\"" + localProperties['USER_API_URL'] + "\"")
            buildConfigField("String", "ACTIVITY_API_URL", "\"" + localProperties['ACTIVITY_API_URL'] + "\"")
            buildConfigField("String", "MAPBOX_SECRET_TOKEN", "\"" + localProperties['MAPBOX_SECRET_TOKEN'] + "\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    namespace 'com.soen490chrysalis.papilio'
}

task jacocoUnifiedTestReport(type: JacocoReport, dependsOn: ['connectedAndroidTest', 'test']) {

    reports {
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

    // java compiled classes
    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)

    // kotlin compiled classes
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().setFrom(files([javaTree, kotlinTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testReleaseUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec"
    ]))
}

dependencies {

    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.4'

    // firebase configuration
    implementation platform('com.google.firebase:firebase-bom:30.4.1') // Import the Firebase BoM
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation 'com.google.firebase:firebase-auth:21.0.1'

    implementation "androidx.activity:activity-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.annotation:annotation:1.4.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4"
    implementation 'com.github.dhaval2404:imagepicker:2.1'

    // For Mapbox address autofill & other stuff
    implementation "com.mapbox.search:mapbox-search-android-ui:1.0.0-beta.43"
    implementation 'com.mapbox.maps:android:10.11.0'


    // Dependencies for retrofit library for network requests
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

    // Moshi
    def moshi_version = '1.13.0'
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"

    // Retrofit with Moshi Converter
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // Libraries only used for testing which are not included in the final APK file
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0')
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.4.0')
    androidTestImplementation('androidx.test:runner:1.4.0')
    androidTestImplementation('androidx.test:rules:1.4.0')
    androidTestImplementation('androidx.test.ext:junit:1.1.3')
    androidTestImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    androidTestImplementation("org.mockito:mockito-inline:2.13.0")
    androidTestImplementation("androidx.test:core:1.5.0-alpha02")
    androidTestImplementation("androidx.test:core-ktx:1.5.0-alpha02")

    testImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"
    testImplementation "org.mockito:mockito-core:4.0.0"
    testImplementation "org.mockito:mockito-inline:2.13.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "io.mockk:mockk-android:1.13.2"
    testImplementation "junit:junit:4.13.2"
}